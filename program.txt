1). Let's create a function that turns text into pig latin: a simple text transformation that modifies each word moving 
the first character to the end and appending "ay" to the end. For example, python ends up as ythonpay.


def pig_latin(text):
  say = " "
  # Separate the text into words
  words = text.split()
  pigged_word=[]
  for word in words:
    # Create the pig latin word and add it to the list
    word=word[1:]+word[0]+'ay'
    pigged_word.append(word)
    # Turn the list back into a phrase
  return say.join(pigged_word)
		
print(pig_latin("hello how are you")) # Should be "ellohay owhay reaay ouyay"
print(pig_latin("programming in python is fun")) # Should be "rogrammingpay niay ythonpay siay unfay"

=======================================================================================================================================

2). The groups_per_user function receives a dictionary, which contains group names with the list of users. Users can belong to 
multiple groups. Fill in the blanks to return a dictionary with the users as keys and a list of their groups as values.

def groups_per_user(group_dictionary):
    user_groups = {}
    for group, users in group_dictionary.items():
        for user in users:
            if user not in user_groups:
                user_groups[user] = []
            user_groups[user].append(group)
    return user_groups

print(groups_per_user({"local": ["admin", "userA"],
		"public":  ["admin", "userB"],
		"administrator": ["admin"] }))
		
OUTPUT: {'admin': ['local', 'public', 'administrator'], 'userA': ['local'], 'userB': ['public']}

======================================================================================================================================

3.) A professor with two assistants, Jamie and Drew, wants an attendance list of the students, in the order that they arrived in the classroom. Drew was the first one to note which students arrived, and then Jamie took over. After the class, they each entered their lists into the computer and emailed them to the professor, who needs to combine them into one, in the order of each student's arrival. Jamie emailed a follow-up, saying that her list is in reverse order. Complete the steps to combine them into one list as follows: the contents of Drew's list, followed by Jamie's list in reverse order, to get an accurate list of the students as they arrived.

def combine_lists(list1, list2):
  new_list=list2
  for i in reversed(range(len(list1))):
    new_list.append(list1[i])
  return new_list
  # Generate a new list containing the elements of list2
  # Followed by the elements of list1 in reverse order
	
Jamies_list = ["Alice", "Cindy", "Bobby", "Jan", "Peter"]
Drews_list = ["Mike", "Carol", "Greg", "Marcia"]

print(combine_lists(Jamies_list, Drews_list))

OUTPUT: ['Mike', 'Carol', 'Greg', 'Marcia', 'Peter', 'Jan', 'Bobby', 'Cindy', 'Alice']

=======================================================================================================================================
